// Functions
//
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.

@use "sass:math";

$root-font-size: 16px;

// Round any number to three decimals
@function round_3($value) {
	@return math.div(math.round($value * 1000), 1000);
}

// Unitless
// Removes the unit of a given value.
// @param {Number} $number - Number to remove unit from
// @return {Number} - Unitless number
// See https://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass
@function strip_unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}

	@return $number;
}

// Convert em to px
@function to_px($em) {
	@return strip_unit($em) * $root-font-size; // assuming 1em = 16px
}

// Convert px to em
@function to_em($px) {
	@return strip_unit($px) / strip_unit($root-font-size) * 1em; // assuming 1em = 16px
}

// Project a font-size at a given desktop design viewport up to the real max viewport
// Convert a font-size set at the designer’s mobile viewport
// down to your real minimum viewport (direct proportion)
@function convert_to_target_min($value, $source-vw-min, $target-vw-min: 320px) {
	@return $value * (strip_unit($target-vw-min) / strip_unit($source-vw-min));
}

// Project a font-size at a given mobile design viewport down to the real min viewport
// Convert a font-size set at the designer’s desktop viewport
// up to your real maximum viewport (direct proportion)
@function convert_to_target_max($value, $source-vw-max, $target-vw-max: 1600px) {
	@return $value * (strip_unit($target-vw-max) / strip_unit($source-vw-max));
}
